package utility;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.NumberToTextConverter;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;

public class Base {
	WebDriver driver;
	static
	{
		System.setProperty("webdriver.chrome.driver", ".//drivers//chromedriver.exe");
		System.setProperty("webdriver.gecko.driver", ".//drivers//geckodriver.exe");
	}
	
	public WebDriver initializeDriver() throws IOException, InterruptedException
	{
		String browser=getPropertyData().getProperty("browser");
		 String url=getPropertyData().getProperty("url");
		
		if(browser.equals("chrome"))
		{
			 driver=new ChromeDriver();
			//driver.get(url);             // temprary i am taking data from, 
		}
		else if(browser.equals("firefox"))
		{
			 driver=new FirefoxDriver();
		}
		else if(browser.equals("IE"))
		{
		 // IE
		}
		
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
		
		return driver;	
		
	}
	
	
	
	public static Properties getPropertyData() throws IOException
	{
		FileInputStream fis=new FileInputStream(".//src//main//java//resources//data.properties");
		Properties prop=new Properties();
		prop.load(fis);
		
		return prop;
	}
	
	
	
	
	@AfterTest
	public void closeDriver() throws InterruptedException
	{
		Thread.sleep(3000);
		driver.close();
	}
	
	
	// Create XSSFWorkbook object.
	// get Sheet
	// Identify Testcase column by scanning the intire row
	// once column is identifed then entire Testcase column to identify purches testcase.
	// after you find purches tescase, pull all data of that row, and fed to test.
	
 public ArrayList<String> getData(String getValue) throws IOException {
	 
	 	ArrayList<String> al=new ArrayList<String>();
		FileInputStream fis=new FileInputStream("D://Eclipse_WS//ExcelDriven_WS//ExcelDriven//data//Input.xlsx");
		
		// Create XSSFWorkbook object.
		XSSFWorkbook workbook=new XSSFWorkbook(fis); //FileInputStream arguement 
		int sheets=workbook.getNumberOfSheets();
		for(int i=0;i<sheets;i++)
		{
			if(workbook.getSheetName(i).equalsIgnoreCase("TestData"))
			{
				XSSFSheet sheet=workbook.getSheetAt(i); // get Sheet
				
				// Identify Testcase column by scanning the intire row
				Iterator<Row> rows = sheet.iterator(); // sheet is collection of rows
				Row firstRow = rows.next();
				Iterator<Cell> cells=firstRow.cellIterator(); // row is collection of cells
				int k=0;
				int column=0;
				while(cells.hasNext())
				{
					if(cells.next().getStringCellValue().equalsIgnoreCase("TestCases"))
					{
						column=k;
					}
					k++;
				}
				System.out.println(column);
				
				// once column is identifed then entire Testcase column to identify purches testcase.
				while(rows.hasNext())
				{
					Row row = rows.next();
					if(row.getCell(column).getStringCellValue().equalsIgnoreCase(getValue))
					{
						// after you find purches tescase, pull all data of that row, and fed to test.
						Iterator<Cell> cellValue=row.cellIterator();
						while(cellValue.hasNext())
						{ 
							Cell cv = cellValue.next();
							if(cv.getCellTypeEnum()==CellType.STRING)
							{
								 al.add(cv.getStringCellValue());
							}
							else if(cv.getCellTypeEnum()==CellType.NUMERIC)
							{
								//al.add(cv.getNumericCellValue().toString());
								al.add(NumberToTextConverter.toText(cv.getNumericCellValue()));
							}
						
							
						}
						
					}
				}
			}
		}
		return al;
		
			

 }


}
